{"version":3,"sources":["webpack:///../src/views/register-mock.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,Q,6MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,iBADR,iBAGA,+JACA,oCACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,kDAML,yCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4NAcL,qCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,cACb,WAAc,aACd,cAAc,IAHb,qLAUL,qCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,cACb,WAAc,aACd,cAAc,IAHb,6LAaL,iEAAgD,mBAAGA,WAAW,KAAQ,CAClE,KAAQ,gBADoC,sBAAhD,+FAG2D,mBAAGA,WAAW,KAAQ,CAC7E,KAAQ,6HAD+C,mBAH3D,KAMA,qBAAG,sBAAQA,WAAW,KAAnB,SAAH,6FAA0I,0BAAYA,WAAW,KAAvB,gBAA1I,kD,oMAKJJ,EAAWK,gBAAiB","file":"component---src-views-register-mock-mdx-9a9d8184d92f879fcdcb.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ts-auto-mock/ts-auto-mock/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"register-mock\"\n    }}>{`Register mock`}</h1>\n    <p>{`registerMock will register your custom mock that will be re used automatically whenever a another mock will convert the same interface`}</p>\n    <p>{`./person.ts`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export interface Person {\n  id: string;\n}\n`}</code></pre>\n    <p>{`./person-fake.ts`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { Person } from './person';\n\nexport class PersonFake extends Person {\n  public id: string;\n  public name: string;\n\n  constructor() {\n    this.id = \"Basic Id\";\n    this.name = \"Basic name\";\n  }\n}\n`}</code></pre>\n    <p>{`./context.ts`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\",\n        \"metastring\": \"context.ts\",\n        \"context.ts\": true\n      }}>{`import { registerMock } from 'ts-auto-mock';\nimport { Person } from './person';\nimport { PersonFake } from './person-fake';\n\nregisterMock<Person>(() => new PersonFake());\n`}</code></pre>\n    <p>{`./my-test.ts`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\",\n        \"metastring\": \"my-test.ts\",\n        \"my-test.ts\": true\n      }}>{`interface Wrapper {\n    person: Person;\n}\n\nconst mock: Wrapper = createMock<Wrapper>();\nmock.person // PersonFake\nmock.person.id // \"Basic Id\"\nmock.person.name // \"Basic name\"\n`}</code></pre>\n    <p>{`When using a fake we recommend using the `}<a parentName=\"p\" {...{\n        \"href\": \"./extension\"\n      }}>{`extension strategy`}</a>{` to retrieve the fake object.\nAn example of usage for Promise->FakePromise can be found in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Typescript-TDD/ts-auto-mock/blob/master/test/registerMock/extensionStrategy/extensionStrategy.test.ts\"\n      }}>{`the test folder`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` You can use it only in the common file (webpack context.ts, mocha tsnode.js, etc), using `}<inlineCode parentName=\"p\">{`registerMock`}</inlineCode>{` in other files will have unexpected results.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}