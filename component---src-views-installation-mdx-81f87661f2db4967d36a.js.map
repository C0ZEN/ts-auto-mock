{"version":3,"sources":["webpack:///../src/views/installation.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0eAMO,IAAMA,EAAe,Q,4MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,8NAEG,mBAAGC,WAAW,KAAQ,CACrB,KAAQ,yDADT,wDAFH,MAKA,yHACA,iBAAQ,CACN,GAAM,WADR,WAGA,2EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sdAwBL,iBAAQ,CACN,GAAM,eADR,eAGA,4BAAW,mBAAGA,WAAW,KAAQ,CAC7B,KAAQ,+DADD,wBAAX,yBAGA,sCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0IAYL,iBAAQ,CACN,GAAM,YADR,YAGA,4BAAW,mBAAGA,WAAW,KAAQ,CAC7B,KAAQ,6DADD,sBAGX,sDACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,uCAGL,sCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0IAYL,iBAAQ,CACN,GAAM,WADR,WAGA,iBAAQ,CACN,GAAM,SADR,SAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wOAaL,wCACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,oF,mMAMTJ,EAAWK,gBAAiB","file":"component---src-views-installation-mdx-81f87661f2db4967d36a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ts-auto-mock/ts-auto-mock/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h1>\n    <p>{`To make this library to work you need to provide ts-auto-mock transformer at compile time.\nUnfortunately, TypeScript itself does not currently provide any easy way to use custom transformers\n(See `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Microsoft/TypeScript/issues/14419\"\n      }}>{`https://github.com/Microsoft/TypeScript/issues/14419`}</a>{`).`}</p>\n    <p>{`There are different ways to do it based on how you are currently compiling your typescript files`}</p>\n    <h2 {...{\n      \"id\": \"webpack\"\n    }}>{`webpack`}</h2>\n    <p>{`You can use awesome-typescript-loader or ts-loader`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// webpack.config.js\nconst tsAutoMockTransformer = require('ts-auto-mock/transformer').default;\n\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\\\.ts$/,\n        loader: 'ts-loader', // or 'awesome-typescript-loader'\n        options: {\n          getCustomTransformers: program => ({\n              before: [\n                  tsAutoMockTransformer(program)\n              ]\n          })\n        }\n      }\n    ]\n  }\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"ttypescript\"\n    }}>{`ttypescript`}</h2>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/cevek/ttypescript/blob/master/README.md\"\n      }}>{`ttypescript's README`}</a>{` for more information`}</p>\n    <p>{`tsconfig.json`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"compilerOptions\": {\n    //...,\n    \"plugins\": [\n      { \"transform\": \"ts-auto-mock/transformer\" }\n    ]\n  },\n  //...\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"ts-patch\"\n    }}>{`ts-patch`}</h2>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/nonara/ts-patch/blob/master/README.md\"\n      }}>{`ts-patch's README`}</a></p>\n    <p>{`Command to run to install it:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm i ts-patch\nts-patch install\n`}</code></pre>\n    <p>{`tsconfig.json`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"compilerOptions\": {\n    //...,\n    \"plugins\": [\n      { \"transform\": \"ts-auto-mock/transformer\" }\n    ]\n  },\n  //...\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"ts-node\"\n    }}>{`ts-node`}</h2>\n    <h3 {...{\n      \"id\": \"mocha\"\n    }}>{`mocha`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// tsnode.js\nconst tsAutoMockTransformer = require('ts-auto-mock/transformer').default;\n\nrequire(\"ts-node\").register({\n  transformers: program => ({\n    before: [\n      tsAutoMockTransformer(program)\n    ]\n  })\n});\n`}</code></pre>\n    <p>{`Command to run:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`mocha --require './tsnode.js' --watch-extensions ts,tsx \"test/**/*.{ts,tsx}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}