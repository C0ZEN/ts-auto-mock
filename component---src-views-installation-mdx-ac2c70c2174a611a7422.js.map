{"version":3,"sources":["webpack:///../src/views/installation.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"2eAMO,IAAMA,EAAe,Q,4MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,yNAEA,qBAAG,mBAAGC,WAAW,KAAQ,CACrB,KAAQ,yDADT,wBAAH,KAGA,yHACA,iBAAQ,CACN,GAAM,8BADR,gCAGA,sBACE,kBAAIA,WAAW,MAAf,6BAEF,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,qFAEL,6EACA,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,6CAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,sKAYL,sBACE,kBAAIA,WAAW,MAAf,wJAEA,kBAAIA,WAAW,MAAf,+BAAoD,mBAAGA,WAAW,MAAS,CACvE,KAAQ,+GADwC,UAItD,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,iEAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,2FAUL,sBACE,kBAAIA,WAAW,MAAf,+BAAoD,mBAAGA,WAAW,MAAS,CACvE,KAAQ,8GADwC,UAItD,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,mDAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,sHAYL,sBACE,kBAAIA,WAAW,MAAf,+BAAoD,mBAAGA,WAAW,MAAS,CACvE,KAAQ,8GADwC,UAItD,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,yDAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,sFAUL,qCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kCAIL,qBAAG,mBAAGA,WAAW,KAAQ,CACrB,KAAQ,2GADT,YAGH,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,2BAEF,wCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iVAuBL,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,kBAEF,wCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,wDAQL,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,mBAEL,oCACA,iBAAQ,CACN,GAAM,WADR,WAGA,2EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sdAwBL,iBAAQ,CACN,GAAM,eADR,eAGA,4BAAW,mBAAGA,WAAW,KAAQ,CAC7B,KAAQ,+DADD,wBAAX,yBAGA,sCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0IAYL,iBAAQ,CACN,GAAM,YADR,YAGA,4BAAW,mBAAGA,WAAW,KAAQ,CAC7B,KAAQ,6DADD,sBAGX,sDACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,uCAGL,sCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0IAYL,iBAAQ,CACN,GAAM,WADR,WAGA,iBAAQ,CACN,GAAM,SADR,SAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wOAaL,wCACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,oF,mMAMTJ,EAAWK,gBAAiB","file":"component---src-views-installation-mdx-ac2c70c2174a611a7422.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ts-auto-mock/ts-auto-mock/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h1>\n    <p>{`To make this library to work you need to provide ts-auto-mock transformer at compile time.\nUnfortunately, TypeScript itself does not currently provide any easy way to use custom transformers.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Microsoft/TypeScript/issues/14419\"\n      }}>{`See typescript issue`}</a>{`.`}</p>\n    <p>{`There are different ways to do it based on how you are currently compiling your typescript files`}</p>\n    <h2 {...{\n      \"id\": \"jest--ts-jest--ttypescript\"\n    }}>{`jest + ts jest + ttypescript`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`install the dependencies`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install jest ts-jest typescript ttypescript jest-ts-auto-mock ts-auto-mock\n`}</code></pre>\n    <p>{`you need ttypescript to allow typescript transformer`}</p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`add the transformer to the tsconfig.json`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`...\n\"compilerOptions\": {\n    \"plugins\": [\n      {\n        \"transform\": \"ts-auto-mock/transformer\",\n        \"cacheBetweenTests\": false\n      }\n    ]\n...\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Remember to set cacheBetweenTests to false because jest runs test in parallel and ts-auto-mock doesn't support yet the cache\nbetween parallel tests`}</li>\n      <li parentName=\"ul\">{`you can find a json example `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/Typescript-TDD/jest-ts-auto-mock/blob/master/examples/ts-jest-ttypescript/tsconfig.json\"\n        }}>{`here`}</a></li>\n    </ul>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`add ts-jest to the transformation pattern in the jest config`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`...\n \"jest\": {\n    \"transform\": {\n        \".(ts|tsx)\": \"ts-jest\"\n    }\n  }\n...\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`you can find a json example `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/Typescript-TDD/jest-ts-auto-mock/blob/master/examples/ts-jest-ttypescript/package.json\"\n        }}>{`here`}</a></li>\n    </ul>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`add ttypescript to be used as ts jest compiler`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`...\n\"jest\": {\n    \"globals\": {\n      \"ts-jest\": {\n        \"compiler\": \"ttypescript\"\n      }\n    }\n}\n...\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`you can find a json example `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/Typescript-TDD/jest-ts-auto-mock/blob/master/examples/ts-jest-ttypescript/package.json\"\n        }}>{`here`}</a></li>\n    </ul>\n    <ol {...{\n      \"start\": 5\n    }}>\n      <li parentName=\"ol\">{`add jest-ts-auto-mock config file to your setup file`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`...\n\"jest\": {\n    \"setupFiles\": [\n      \"<rootDir>config.ts\"\n    ]\n }\n...\n`}</code></pre>\n    <p>{`// config.ts`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import \"jest-ts-auto-mock\";\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Typescript-TDD/jest-ts-auto-mock/blob/master/examples/ts-jest-ttypescript/config.ts\"\n      }}>{`Example`}</a></p>\n    <ol {...{\n      \"start\": 6\n    }}>\n      <li parentName=\"ol\">{`Create your first test`}</li>\n    </ol>\n    <p>{`// test.test.ts`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createMock } from \"ts-auto-mock\";\n\ninterface Interface {\n        a: string;\n        b: number;\n}\n\ndescribe('reuse', () => {\n    let mock: Interface;\n\n    beforeEach(() => {\n\n        mock = createMock<Interface>();\n    });\n\n    it('should work', () => {\n        expect(mock.a).toBe(\"\");\n    });\n});\n\n`}</code></pre>\n    <ol {...{\n      \"start\": 7\n    }}>\n      <li parentName=\"ol\">{`run your test`}</li>\n    </ol>\n    <p>{`// package.json`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`...\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n...\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`npm run test\n`}</code></pre>\n    <p>{`All Done!!!`}</p>\n    <h2 {...{\n      \"id\": \"webpack\"\n    }}>{`webpack`}</h2>\n    <p>{`You can use awesome-typescript-loader or ts-loader`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// webpack.config.js\nconst tsAutoMockTransformer = require('ts-auto-mock/transformer').default;\n\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\\\.ts$/,\n        loader: 'ts-loader', // or 'awesome-typescript-loader'\n        options: {\n          getCustomTransformers: program => ({\n              before: [\n                  tsAutoMockTransformer(program)\n              ]\n          })\n        }\n      }\n    ]\n  }\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"ttypescript\"\n    }}>{`ttypescript`}</h2>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/cevek/ttypescript/blob/master/README.md\"\n      }}>{`ttypescript's README`}</a>{` for more information`}</p>\n    <p>{`tsconfig.json`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"compilerOptions\": {\n    //...,\n    \"plugins\": [\n      { \"transform\": \"ts-auto-mock/transformer\" }\n    ]\n  },\n  //...\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"ts-patch\"\n    }}>{`ts-patch`}</h2>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/nonara/ts-patch/blob/master/README.md\"\n      }}>{`ts-patch's README`}</a></p>\n    <p>{`Command to run to install it:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm i ts-patch\nts-patch install\n`}</code></pre>\n    <p>{`tsconfig.json`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"compilerOptions\": {\n    //...,\n    \"plugins\": [\n      { \"transform\": \"ts-auto-mock/transformer\" }\n    ]\n  },\n  //...\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"ts-node\"\n    }}>{`ts-node`}</h2>\n    <h3 {...{\n      \"id\": \"mocha\"\n    }}>{`mocha`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// tsnode.js\nconst tsAutoMockTransformer = require('ts-auto-mock/transformer').default;\n\nrequire(\"ts-node\").register({\n  transformers: program => ({\n    before: [\n      tsAutoMockTransformer(program)\n    ]\n  })\n});\n`}</code></pre>\n    <p>{`Command to run:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`mocha --require './tsnode.js' --watch-extensions ts,tsx \"test/**/*.{ts,tsx}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}